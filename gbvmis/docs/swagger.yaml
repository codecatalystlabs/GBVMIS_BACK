basePath: /
definitions:
  controllers.ChargePayload:
    properties:
      charge_title:
        type: string
      description:
        type: string
      severity:
        type: string
    type: object
  controllers.ChargeUpdatePayload:
    properties:
      charge_title:
        type: string
      description:
        type: string
      severity:
        type: string
    type: object
  controllers.CreateArrestPayload:
    properties:
      arrest_date:
        type: string
      location:
        type: string
      notes:
        type: string
      officer_name:
        type: string
      suspect_id:
        type: integer
    type: object
  controllers.CreateCasePayload:
    properties:
      case_number:
        type: string
      charges:
        description: Optional inline
        items:
          $ref: '#/definitions/controllers.ChargePayload'
        type: array
      date_opened:
        type: string
      description:
        type: string
      officer_id:
        type: integer
      police_post_id:
        type: integer
      status:
        type: string
      suspect_ids:
        items:
          type: integer
        type: array
      title:
        type: string
      victim_ids:
        description: For existing victims
        items:
          type: integer
        type: array
    required:
    - case_number
    - title
    type: object
  controllers.CreateExaminationPayload:
    properties:
      case_id:
        type: integer
      consent_given:
        type: boolean
      exam_date:
        description: Use `YYYY-MM-DD`
        type: string
      facility_id:
        type: integer
      findings:
        type: string
      practitioner_id:
        type: integer
      referral:
        type: string
      treatment:
        type: string
      victim_id:
        type: integer
    required:
    - case_id
    - exam_date
    - facility_id
    - practitioner_id
    - victim_id
    type: object
  controllers.CreateHealthFacilityPayload:
    properties:
      contact:
        type: string
      location:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  controllers.CreateHealthPractitionerPayload:
    properties:
      facility_id:
        type: integer
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      phone:
        type: string
      profession:
        type: string
    required:
    - facility_id
    - first_name
    - last_name
    - profession
    type: object
  controllers.CreateOfficerPayload:
    properties:
      badge_no:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        minLength: 6
        type: string
      phone:
        type: string
      post_id:
        type: integer
      rank:
        type: string
      role_ids:
        description: 'Optional: to assign roles'
        items:
          type: integer
        type: array
      username:
        type: string
    required:
    - badge_no
    - email
    - first_name
    - last_name
    - password
    - phone
    - post_id
    - rank
    - username
    type: object
  controllers.CreatePolicePostPayload:
    properties:
      contact:
        type: string
      location:
        type: string
      name:
        type: string
    required:
    - name
    type: object
  controllers.CreateVictimPayload:
    properties:
      address:
        type: string
      case_ids:
        items:
          type: integer
        type: array
      created_by:
        type: string
      dob:
        description: expect "YYYY-MM-DD"
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      nationality:
        type: string
      nin:
        type: string
      phone_number:
        type: string
      updated_by:
        type: string
    type: object
  controllers.UpdateArrestPayload:
    properties:
      arrest_date:
        type: string
      location:
        type: string
      notes:
        type: string
      officer_name:
        type: string
      suspect_id:
        type: integer
    type: object
  controllers.UpdateCasePayload:
    properties:
      charges:
        description: <== new field
        items:
          $ref: '#/definitions/controllers.ChargeUpdatePayload'
        type: array
      date_opened:
        type: string
      description:
        type: string
      officer_id:
        type: integer
      police_post_id:
        type: integer
      status:
        type: string
      suspect_id:
        type: integer
      title:
        type: string
      victim_ids:
        description: NEW
        items:
          type: integer
        type: array
    type: object
  controllers.UpdateChargePayload:
    properties:
      address:
        type: string
      dob:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      nationality:
        type: string
      nin:
        type: string
      phone_number:
        type: string
      updated_by:
        type: string
    type: object
  controllers.UpdateExaminationPayload:
    properties:
      case_id:
        type: integer
      consent_given:
        type: boolean
      exam_date:
        type: string
      facility_id:
        type: integer
      findings:
        type: string
      practitioner_id:
        type: integer
      referral:
        description: Optional referral info
        type: string
      treatment:
        type: string
      victim_id:
        type: integer
    type: object
  controllers.UpdateHealthFacilityPayload:
    properties:
      contact:
        type: string
      location:
        type: string
      name:
        type: string
    type: object
  controllers.UpdateHealthPractitionerPayload:
    properties:
      facility_id:
        type: integer
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      phone:
        type: string
      profession:
        description: e.g., Doctor, Nurse, Counselor
        type: string
    type: object
  controllers.UpdatePoliceOfficerPayload:
    properties:
      badge_no:
        type: string
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      phone:
        type: string
      post_id:
        type: integer
      rank:
        type: string
      role_ids:
        items:
          type: integer
        type: array
    type: object
  controllers.UpdatePolicePostPayload:
    properties:
      contact:
        type: string
      location:
        type: string
      name:
        type: string
    type: object
  controllers.UpdateVictimPayload:
    properties:
      address:
        type: string
      dob:
        type: string
      first_name:
        type: string
      gender:
        type: string
      last_name:
        type: string
      nationality:
        type: string
      nin:
        type: string
      phone_number:
        type: string
      updated_by:
        type: string
    type: object
  fiber.Map:
    additionalProperties: true
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Charge:
    properties:
      case_id:
        type: integer
      charge_title:
        type: string
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      severity:
        description: e.g., Felony, Misdemeanor
        type: string
      updatedAt:
        type: string
    type: object
host: localhost:8085/api
info:
  contact:
    email: fiber@swagger.io
    name: API Support
  description: This is a gbvmis api
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: SGBV Police API
  version: "1.0"
paths:
  /arrest:
    post:
      consumes:
      - application/json
      description: Creates a new arrest entry in the system and returns the created
        record.
      parameters:
      - description: Arrest data to create
        in: body
        name: Arrest
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateArrestPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created arrest record
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad request due to invalid input
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when creating arrest
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Create a new arrest record
      tags:
      - Arrests
  /arrest/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a Arrest record based on the provided ID.
      parameters:
      - description: Arrest ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Arrest deleted successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Arrest not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when deleting Arrest
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Delete a Arrest record by ID
      tags:
      - Arrests
    get:
      consumes:
      - application/json
      description: Fetches a Arrest record based on the provided ID.
      parameters:
      - description: Arrest ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Arrest retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Arrest not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when retrieving arrest
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a single Arrest record by ID
      tags:
      - Arrests
    put:
      consumes:
      - application/json
      description: Updates the details of a Arrest record based on the provided ID
        and request body.
      parameters:
      - description: Arrest ID
        in: path
        name: id
        required: true
        type: string
      - description: Arrest data to update
        in: body
        name: Arrest
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateArrestPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Arrest updated successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Invalid input or empty request body
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Arrest not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when updating Arrest
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Update an existing arrest record by ID
      tags:
      - Arrests
  /arrests:
    get:
      consumes:
      - application/json
      description: Fetches all Arrest records with pagination support.
      produces:
      - application/json
      responses:
        "200":
          description: Arrests retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve arrests
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a paginated list of arrests
      tags:
      - Arrests
  /arrests/search:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of arrests based on search criteria.
      produces:
      - application/json
      responses:
        "200":
          description: Arrests retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve Arrests
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Search for arrests with pagination
      tags:
      - Arrests
  /case:
    post:
      consumes:
      - application/json
      description: Creates a new case entry in the system and returns the created
        record.
      parameters:
      - description: Case data to create
        in: body
        name: case
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateCasePayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created case record
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad request due to invalid input
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when creating case
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Create a new case record
      tags:
      - Cases
  /case/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a Case record based on the provided ID.
      parameters:
      - description: Case ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Case deleted successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Case not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when deleting case
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Delete a Case record by ID
      tags:
      - Cases
    get:
      consumes:
      - application/json
      description: Fetches a case record based on the provided ID.
      parameters:
      - description: Case ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Case retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Case not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when retrieving case
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a single case record by ID
      tags:
      - Cases
    put:
      consumes:
      - application/json
      description: Updates the details of a case record based on the provided ID and
        request body.
      parameters:
      - description: Case ID
        in: path
        name: id
        required: true
        type: string
      - description: Case data to update
        in: body
        name: case
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateCasePayload'
      produces:
      - application/json
      responses:
        "200":
          description: Case updated successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Invalid input or empty request body
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Case not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when updating case
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Update an existing case record by ID
      tags:
      - Cases
  /cases:
    get:
      consumes:
      - application/json
      description: Fetches all case records with pagination support.
      produces:
      - application/json
      responses:
        "200":
          description: Cases retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve cases
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a paginated list of cases
      tags:
      - Cases
  /cases/search:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of cases based on search criteria.
      produces:
      - application/json
      responses:
        "200":
          description: Cases retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve Cases
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Search for Cases with pagination
      tags:
      - Cases
  /charge:
    post:
      consumes:
      - application/json
      description: Creates a new charge entry in the system and returns the created
        record.
      parameters:
      - description: Charge data to create
        in: body
        name: charge
        required: true
        schema:
          $ref: '#/definitions/models.Charge'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created charge record
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad request due to invalid input
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when creating charge
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Create a new charge record
      tags:
      - Charges
  /charge/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a charge record based on the provided ID.
      parameters:
      - description: Charge ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Charge deleted successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Charge not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when deleting charge
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Delete a charge record by ID
      tags:
      - Charges
    get:
      consumes:
      - application/json
      description: Fetches a charge record based on the provided ID.
      parameters:
      - description: Charge ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Charge retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Charge not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when retrieving charge
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a single charge record by ID
      tags:
      - Charges
    put:
      consumes:
      - application/json
      description: Updates the details of a charge record based on the provided ID
        and request body.
      parameters:
      - description: Charge ID
        in: path
        name: id
        required: true
        type: string
      - description: Charge data to update
        in: body
        name: charge
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateChargePayload'
      produces:
      - application/json
      responses:
        "200":
          description: Charge updated successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Invalid input or empty request body
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Charge not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when updating charge
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Update an existing charge record by ID
      tags:
      - Charges
  /charges:
    get:
      consumes:
      - application/json
      description: Fetches all charge records with pagination support.
      produces:
      - application/json
      responses:
        "200":
          description: Charges retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve charges
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a paginated list of charges
      tags:
      - Charges
  /charges/search:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of charges based on search criteria.
      produces:
      - application/json
      responses:
        "200":
          description: Charges retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve charges
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Search for charges with pagination
      tags:
      - Charges
  /examination:
    post:
      consumes:
      - application/json
      description: Creates a new examination entry in the system and returns the created
        record.
      parameters:
      - description: Examination data to create
        in: body
        name: examination
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateExaminationPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created examination record
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad request due to invalid input
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when creating examination
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Create a new examination record
      tags:
      - Examinations
  /examination/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a examination record based on the provided ID.
      parameters:
      - description: Examination ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Examination deleted successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Examination not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when deleting examination
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Delete a examination record by ID
      tags:
      - Examinations
    get:
      consumes:
      - application/json
      description: Fetches a examination record based on the provided ID.
      parameters:
      - description: Examination ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Examination retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Examination not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when retrieving examination
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a single examination record by ID
      tags:
      - Examinations
    put:
      consumes:
      - application/json
      description: Updates the details of a examination record based on the provided
        ID and request body.
      parameters:
      - description: Examination ID
        in: path
        name: id
        required: true
        type: string
      - description: Examination data to update
        in: body
        name: examination
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateExaminationPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Examination updated successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Invalid input or empty request body
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Examination not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when updating examination
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Update an existing examination record by ID
      tags:
      - Examinations
  /examinations:
    get:
      consumes:
      - application/json
      description: Fetches all examination records with pagination support.
      produces:
      - application/json
      responses:
        "200":
          description: Examinations retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve examinations
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a paginated list of examinations
      tags:
      - Examinations
  /examinations/search:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of examinations based on search criteria.
      produces:
      - application/json
      responses:
        "200":
          description: Examinations retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve examinations
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Search for examinations with pagination
      tags:
      - Examinations
  /health-facilities:
    get:
      consumes:
      - application/json
      description: Fetches all healthFacility records with pagination support.
      produces:
      - application/json
      responses:
        "200":
          description: Health facilities retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve health facilities
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a paginated list of health facilities
      tags:
      - Health facilities
  /health-facilities/search:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of health facilities based on search
        criteria.
      produces:
      - application/json
      responses:
        "200":
          description: Health facilities retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve HealthFacilities
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Search for health facilities with pagination
      tags:
      - Health facilities
  /health-facility:
    post:
      consumes:
      - application/json
      description: Creates a new health facility entry in the system and returns the
        created record.
      parameters:
      - description: HealthFacility data to create
        in: body
        name: HealthFacility
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateHealthFacilityPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created health facility record
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad request due to invalid input
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when creating health facility
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Create a new health facility record
      tags:
      - Health facilities
  /health-facility/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a Health facility record based on the provided ID.
      parameters:
      - description: HealthFacility ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Health facility deleted successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: HealthFacility not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when deleting HealthFacility
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Delete a HealthFacility record by ID
      tags:
      - Health facilities
    get:
      consumes:
      - application/json
      description: Fetches a HealthFacility record based on the provided ID.
      parameters:
      - description: HealthFacility ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Health facility retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Health facility not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when retrieving Health facility
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a single HealthFacility record by ID
      tags:
      - Health facilities
    put:
      consumes:
      - application/json
      description: Updates the details of a HealthFacility record based on the provided
        ID and request body.
      parameters:
      - description: Health facility ID
        in: path
        name: id
        required: true
        type: string
      - description: Health facility data to update
        in: body
        name: HealthFacility
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateHealthFacilityPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Health facility updated successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Invalid input or empty request body
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: HealthFacility not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when updating Health facility
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Update an existing Health facility record by ID
      tags:
      - Health facilities
  /health-practitioner:
    post:
      consumes:
      - application/json
      description: Creates a new health practitioner entry in the system and returns
        the created record.
      parameters:
      - description: Health practitioner data to create
        in: body
        name: practitioner
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateHealthPractitionerPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created health practitioner record
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad request due to invalid input
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when creating health practitioner
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Create a new health practitioner record
      tags:
      - Health practitioners
  /health-practitioner/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a Health Practitioner record based on the provided ID.
      parameters:
      - description: HealthPractitioner ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Health Practitioner deleted successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: HealthPractitioner not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when deleting HealthPractitioner
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Delete a HealthPractitioner record by ID
      tags:
      - Health practitioners
    get:
      consumes:
      - application/json
      description: Fetches a HealthPractitioner record based on the provided ID.
      parameters:
      - description: HealthPractitioner ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Health Practitioner retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Health Practitioner not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when retrieving Health Practitioner
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a single HealthPractitioner record by ID
      tags:
      - Health practitioners
    put:
      consumes:
      - application/json
      description: Updates the details of a HealthPractitioner record based on the
        provided ID and request body.
      parameters:
      - description: Health practitioner ID
        in: path
        name: id
        required: true
        type: string
      - description: Health practitioner data to update
        in: body
        name: HealthPractitioner
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateHealthPractitionerPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Health practitioner updated successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Invalid input or empty request body
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: HealthPractitioner not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when updating Health practitioner
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Update an existing Health practitioner record by ID
      tags:
      - Health practitioners
  /health-practitioners:
    get:
      consumes:
      - application/json
      description: Fetches all healthPractitioner records with pagination support.
      produces:
      - application/json
      responses:
        "200":
          description: Health practitioners retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve health practitioners
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a paginated list of health practitioners
      tags:
      - Health practitioners
  /health-practitioners/search:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of health practitioners based on search
        criteria.
      produces:
      - application/json
      responses:
        "200":
          description: Health practitioners retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve HealthPractitioners
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Search for health practitioners with pagination
      tags:
      - Health practitioners
  /login:
    post:
      consumes:
      - application/json
      description: Authenticate a police officer using email or username and password
      parameters:
      - description: Login credentials
        in: body
        name: credentials
        required: true
        schema:
          properties:
            identifier:
              type: string
            password:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Returns access and refresh tokens
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid credentials
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Token generation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Login a police officer
      tags:
      - Auth
  /police-officer:
    post:
      consumes:
      - application/json
      description: Creates a new police Officer entry in the system and returns the
        created record.
      parameters:
      - description: PoliceOfficer data to create
        in: body
        name: PoliceOfficer
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateOfficerPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created police Officer record
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad request due to invalid input
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when creating police Officer
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Create a new police Officer record
      tags:
      - Police Officers
  /police-officer/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a PoliceOfficer record based on the provided ID.
      parameters:
      - description: PoliceOfficer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: PoliceOfficer deleted successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: PoliceOfficer not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when deleting policeOfficer
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Delete a PoliceOfficer record by ID
      tags:
      - Police Officers
    get:
      consumes:
      - application/json
      description: Fetches a policeOfficer record based on the provided ID.
      parameters:
      - description: PoliceOfficer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: PoliceOfficer retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: PoliceOfficer not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when retrieving PoliceOfficer
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a single policeOfficer record by ID
      tags:
      - Police Officers
    put:
      consumes:
      - application/json
      description: Updates the details of a policeOfficer record based on the provided
        ID and request body.
      parameters:
      - description: PoliceOfficer ID
        in: path
        name: id
        required: true
        type: string
      - description: PoliceOfficer data to update
        in: body
        name: policeOfficer
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdatePoliceOfficerPayload'
      produces:
      - application/json
      responses:
        "200":
          description: PoliceOfficer updated successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Invalid input or empty request body
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: PoliceOfficer not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when updating policeOfficer
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Update an existing policeOfficer record by ID
      tags:
      - Police Officers
  /police-officers:
    get:
      consumes:
      - application/json
      description: Fetches all policeOfficer records with pagination support.
      produces:
      - application/json
      responses:
        "200":
          description: policeOfficers retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve policeOfficers
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a paginated list of policeOfficers
      tags:
      - Police Officers
  /police-officers/search:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of policeOfficers based on search criteria.
      produces:
      - application/json
      responses:
        "200":
          description: PoliceOfficers retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve PoliceOfficers
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Search for policeOfficers with pagination
      tags:
      - Police Officers
  /police-post:
    post:
      consumes:
      - application/json
      description: Creates a new police post entry in the system and returns the created
        record.
      parameters:
      - description: PolicePost data to create
        in: body
        name: Policepost
        required: true
        schema:
          $ref: '#/definitions/controllers.CreatePolicePostPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created police post record
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad request due to invalid input
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when creating police post
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Create a new police post record
      tags:
      - Police Posts
  /police-post/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a PolicePost record based on the provided ID.
      parameters:
      - description: PolicePost ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: PolicePost deleted successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: PolicePost not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when deleting policePost
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Delete a PolicePost record by ID
      tags:
      - Police Posts
    get:
      consumes:
      - application/json
      description: Fetches a policePost record based on the provided ID.
      parameters:
      - description: PolicePost ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: PolicePost retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: PolicePost not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when retrieving PolicePost
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a single policePost record by ID
      tags:
      - Police Posts
    put:
      consumes:
      - application/json
      description: Updates the details of a policePost record based on the provided
        ID and request body.
      parameters:
      - description: PolicePost ID
        in: path
        name: id
        required: true
        type: string
      - description: PolicePost data to update
        in: body
        name: policePost
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdatePolicePostPayload'
      produces:
      - application/json
      responses:
        "200":
          description: PolicePost updated successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Invalid input or empty request body
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: PolicePost not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when updating policePost
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Update an existing policePost record by ID
      tags:
      - Police Posts
  /police-posts:
    get:
      consumes:
      - application/json
      description: Fetches all policePost records with pagination support.
      produces:
      - application/json
      responses:
        "200":
          description: policePosts retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve policePosts
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a paginated list of policePosts
      tags:
      - Police Posts
  /police-posts/search:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of policePosts based on search criteria.
      produces:
      - application/json
      responses:
        "200":
          description: PolicePosts retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve PolicePosts
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Search for policePosts with pagination
      tags:
      - Police Posts
  /refresh-token:
    post:
      consumes:
      - application/json
      description: Generates new access and refresh tokens using a valid refresh token
      parameters:
      - description: Refresh token
        in: body
        name: refresh_token
        required: true
        schema:
          properties:
            refresh_token:
              type: string
          type: object
      produces:
      - application/json
      responses:
        "200":
          description: Returns new access and refresh tokens
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Invalid input
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: Invalid or expired refresh token
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Token generation error
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Refresh JWT tokens
      tags:
      - Auth
  /role/{id}:
    get:
      consumes:
      - application/json
      description: Fetches a role record based on the provided ID.
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Role retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when retrieving role
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a single role record by ID
      tags:
      - Roles
  /roles:
    get:
      consumes:
      - application/json
      description: Fetches all role records with pagination support.
      produces:
      - application/json
      responses:
        "200":
          description: Roles retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve roles
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a paginated list of roles
      tags:
      - roles
  /roles/search:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of roles based on search criteria.
      produces:
      - application/json
      responses:
        "200":
          description: Roles retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve roles
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Search for roles with pagination
      tags:
      - Roles
  /suspect:
    post:
      consumes:
      - multipart/form-data
      description: Creates a new suspect entry with photo and fingerprints files.
      parameters:
      - description: First Name
        in: formData
        name: first_name
        required: true
        type: string
      - description: Middle Name
        in: formData
        name: middle_name
        type: string
      - description: Last Name
        in: formData
        name: last_name
        required: true
        type: string
      - description: DOB in YYYY-MM-DD format
        in: formData
        name: dob
        type: string
      - description: Gender
        in: formData
        name: gender
        type: string
      - description: Phone Number
        in: formData
        name: phone_number
        type: string
      - description: NIN
        in: formData
        name: nin
        type: string
      - description: Nationality
        in: formData
        name: nationality
        type: string
      - description: Address
        in: formData
        name: address
        type: string
      - description: Occupation
        in: formData
        name: occupation
        type: string
      - description: Status
        in: formData
        name: status
        type: string
      - description: Created By
        in: formData
        name: created_by
        required: true
        type: string
      - description: Updated By
        in: formData
        name: updated_by
        type: string
      - description: Photo file upload
        in: formData
        name: photo
        type: file
      - description: Fingerprints file upload
        in: formData
        name: fingerprints
        type: file
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created suspect record
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad request due to invalid input or file error
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when creating suspect
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Create a new suspect record with photo and fingerprints upload
      tags:
      - Suspects
  /suspect/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a suspect record based on the provided ID.
      parameters:
      - description: Suspect ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Suspect deleted successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Suspect not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when deleting suspect
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Delete a suspect record by ID
      tags:
      - Suspects
    get:
      consumes:
      - application/json
      description: Fetches a suspect record based on the provided ID.
      parameters:
      - description: Suspect ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Suspect retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Suspect not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when retrieving suspect
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a single suspect record by ID
      tags:
      - Suspects
    put:
      consumes:
      - multipart/form-data
      description: Partially updates fields of an existing suspect, including photo
        and fingerprints.
      parameters:
      - description: Suspect ID
        in: path
        name: id
        required: true
        type: string
      - description: First Name
        in: formData
        name: first_name
        type: string
      - description: Middle Name
        in: formData
        name: middle_name
        type: string
      - description: Last Name
        in: formData
        name: last_name
        type: string
      - description: DOB in YYYY-MM-DD format
        in: formData
        name: dob
        type: string
      - description: Gender
        in: formData
        name: gender
        type: string
      - description: Phone Number
        in: formData
        name: phone_number
        type: string
      - description: NIN
        in: formData
        name: nin
        type: string
      - description: Nationality
        in: formData
        name: nationality
        type: string
      - description: Address
        in: formData
        name: address
        type: string
      - description: Occupation
        in: formData
        name: occupation
        type: string
      - description: Status
        in: formData
        name: status
        type: string
      - description: Updated By
        in: formData
        name: updated_by
        required: true
        type: string
      - description: Photo file upload
        in: formData
        name: photo
        type: file
      - description: Fingerprints file upload
        in: formData
        name: fingerprints
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Suspect updated successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad request due to invalid input or file error
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Suspect not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when updating suspect
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Update a suspect record by ID
      tags:
      - Suspects
  /suspects:
    get:
      consumes:
      - application/json
      description: Fetches all suspect records with pagination support.
      produces:
      - application/json
      responses:
        "200":
          description: Suspects retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve suspects
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a paginated list of suspects
      tags:
      - Suspects
  /suspects/search:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of suspects based on search criteria.
      produces:
      - application/json
      responses:
        "200":
          description: Suspects retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve suspects
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Search for suspects with pagination
      tags:
      - Suspects
  /victim:
    post:
      consumes:
      - application/json
      description: Creates a new victim entry in the system and returns the created
        record.
      parameters:
      - description: Victim data to create
        in: body
        name: victim
        required: true
        schema:
          $ref: '#/definitions/controllers.CreateVictimPayload'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created victim record
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Bad request due to invalid input
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when creating victim
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Create a new victim record
      tags:
      - Victims
  /victim/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a victim record based on the provided ID.
      parameters:
      - description: Victim ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Victim deleted successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Victim not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when deleting victim
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Delete a victim record by ID
      tags:
      - Victims
    get:
      consumes:
      - application/json
      description: Fetches a victim record based on the provided ID.
      parameters:
      - description: Victim ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Victim retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Victim not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when retrieving victim
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a single victim record by ID
      tags:
      - Victims
    put:
      consumes:
      - application/json
      description: Updates the details of a victim record based on the provided ID
        and request body.
      parameters:
      - description: Victim ID
        in: path
        name: id
        required: true
        type: string
      - description: Victim data to update
        in: body
        name: victim
        required: true
        schema:
          $ref: '#/definitions/controllers.UpdateVictimPayload'
      produces:
      - application/json
      responses:
        "200":
          description: Victim updated successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "400":
          description: Invalid input or empty request body
          schema:
            $ref: '#/definitions/fiber.Map'
        "404":
          description: Victim not found
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Server error when updating victim
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Update an existing victim record by ID
      tags:
      - Victims
  /victims:
    get:
      consumes:
      - application/json
      description: Fetches all victim records with pagination support.
      produces:
      - application/json
      responses:
        "200":
          description: Victims retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve victims
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Retrieve a paginated list of victims
      tags:
      - Victims
  /victims/search:
    get:
      consumes:
      - application/json
      description: Retrieves a paginated list of victims based on search criteria.
      produces:
      - application/json
      responses:
        "200":
          description: Victims retrieved successfully
          schema:
            $ref: '#/definitions/fiber.Map'
        "500":
          description: Failed to retrieve victims
          schema:
            $ref: '#/definitions/fiber.Map'
      summary: Search for victims with pagination
      tags:
      - Victims
swagger: "2.0"
