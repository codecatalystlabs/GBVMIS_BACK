{
    "swagger": "2.0",
    "info": {
        "description": "This is a gbvmis api",
        "title": "SGBV Police API",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "email": "fiber@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "1.0"
    },
    "host": "localhost:8080/api",
    "basePath": "/",
    "paths": {
        "/case": {
            "post": {
                "description": "Creates a new case entry in the system and returns the created record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cases"
                ],
                "summary": "Create a new case record",
                "parameters": [
                    {
                        "description": "Case data to create",
                        "name": "case",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateCasePayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created case record",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when creating case",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/case/{id}": {
            "get": {
                "description": "Fetches a case record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cases"
                ],
                "summary": "Retrieve a single case record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Case ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Case retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Case not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when retrieving case",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the details of a case record based on the provided ID and request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cases"
                ],
                "summary": "Update an existing case record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Case ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Case data to update",
                        "name": "case",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateCasePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Case updated successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Invalid input or empty request body",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Case not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when updating case",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a Case record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cases"
                ],
                "summary": "Delete a Case record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Case ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Case deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Case not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when deleting case",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/cases": {
            "get": {
                "description": "Fetches all case records with pagination support.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cases"
                ],
                "summary": "Retrieve a paginated list of cases",
                "responses": {
                    "200": {
                        "description": "Cases retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve cases",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/cases/search": {
            "get": {
                "description": "Retrieves a paginated list of cases based on search criteria.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Cases"
                ],
                "summary": "Search for Cases with pagination",
                "responses": {
                    "200": {
                        "description": "Cases retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve Cases",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/charge": {
            "post": {
                "description": "Creates a new charge entry in the system and returns the created record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charges"
                ],
                "summary": "Create a new charge record",
                "parameters": [
                    {
                        "description": "Charge data to create",
                        "name": "charge",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Charge"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created charge record",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when creating charge",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/charge/{id}": {
            "get": {
                "description": "Fetches a charge record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charges"
                ],
                "summary": "Retrieve a single charge record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Charge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Charge retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Charge not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when retrieving charge",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the details of a charge record based on the provided ID and request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charges"
                ],
                "summary": "Update an existing charge record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Charge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Charge data to update",
                        "name": "charge",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateChargePayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Charge updated successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Invalid input or empty request body",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Charge not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when updating charge",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a charge record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charges"
                ],
                "summary": "Delete a charge record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Charge ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Charge deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Charge not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when deleting charge",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/charges": {
            "get": {
                "description": "Fetches all charge records with pagination support.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charges"
                ],
                "summary": "Retrieve a paginated list of charges",
                "responses": {
                    "200": {
                        "description": "Charges retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve charges",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/charges/search": {
            "get": {
                "description": "Retrieves a paginated list of charges based on search criteria.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Charges"
                ],
                "summary": "Search for charges with pagination",
                "responses": {
                    "200": {
                        "description": "Charges retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve charges",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/examination": {
            "post": {
                "description": "Creates a new examination entry in the system and returns the created record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Examinations"
                ],
                "summary": "Create a new examination record",
                "parameters": [
                    {
                        "description": "Examination data to create",
                        "name": "examination",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Examination"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created examination record",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when creating examination",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/examination/{id}": {
            "get": {
                "description": "Fetches a examination record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Examinations"
                ],
                "summary": "Retrieve a single examination record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Examination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Examination retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Examination not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when retrieving examination",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the details of a examination record based on the provided ID and request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Examinations"
                ],
                "summary": "Update an existing examination record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Examination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Examination data to update",
                        "name": "examination",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateExaminationPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Examination updated successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Invalid input or empty request body",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Examination not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when updating examination",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a examination record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Examinations"
                ],
                "summary": "Delete a examination record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Examination ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Examination deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Examination not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when deleting examination",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/examinations": {
            "get": {
                "description": "Fetches all examination records with pagination support.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Examinations"
                ],
                "summary": "Retrieve a paginated list of examinations",
                "responses": {
                    "200": {
                        "description": "Examinations retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve examinations",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/examinations/search": {
            "get": {
                "description": "Retrieves a paginated list of examinations based on search criteria.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Examinations"
                ],
                "summary": "Search for examinations with pagination",
                "responses": {
                    "200": {
                        "description": "Examinations retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve examinations",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/health-facilities": {
            "get": {
                "description": "Fetches all healthFacility records with pagination support.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health facilities"
                ],
                "summary": "Retrieve a paginated list of health facilities",
                "responses": {
                    "200": {
                        "description": "Health facilities retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve health facilities",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/health-facilities/search": {
            "get": {
                "description": "Retrieves a paginated list of health facilities based on search criteria.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health facilities"
                ],
                "summary": "Search for health facilities with pagination",
                "responses": {
                    "200": {
                        "description": "Health facilities retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve HealthFacilities",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/health-facility": {
            "post": {
                "description": "Creates a new health facility entry in the system and returns the created record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health facilities"
                ],
                "summary": "Create a new health facility record",
                "parameters": [
                    {
                        "description": "HealthFacility data to create",
                        "name": "HealthFacility",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateHealthFacilityPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created health facility record",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when creating health facility",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/health-facility/{id}": {
            "get": {
                "description": "Fetches a HealthFacility record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health facilities"
                ],
                "summary": "Retrieve a single HealthFacility record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HealthFacility ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Health facility retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Health facility not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when retrieving Health facility",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the details of a HealthFacility record based on the provided ID and request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health facilities"
                ],
                "summary": "Update an existing Health facility record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Health facility ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Health facility data to update",
                        "name": "HealthFacility",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateHealthFacilityPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Health facility updated successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Invalid input or empty request body",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "HealthFacility not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when updating Health facility",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a Health facility record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health facilities"
                ],
                "summary": "Delete a HealthFacility record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HealthFacility ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Health facility deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "HealthFacility not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when deleting HealthFacility",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/health-practitioner": {
            "post": {
                "description": "Creates a new health practitioner entry in the system and returns the created record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health practitioners"
                ],
                "summary": "Create a new health practitioner record",
                "parameters": [
                    {
                        "description": "Health practitioner data to create",
                        "name": "practitioner",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.HealthPractitioner"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created health practitioner record",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when creating health practitioner",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/health-practitioner/{id}": {
            "get": {
                "description": "Fetches a HealthPractitioner record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health practitioners"
                ],
                "summary": "Retrieve a single HealthPractitioner record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HealthPractitioner ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Health Practitioner retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Health Practitioner not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when retrieving Health Practitioner",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the details of a HealthPractitioner record based on the provided ID and request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health practitioners"
                ],
                "summary": "Update an existing Health practitioner record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Health practitioner ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Health practitioner data to update",
                        "name": "HealthPractitioner",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateHealthPractitionerPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Health practitioner updated successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Invalid input or empty request body",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "HealthPractitioner not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when updating Health practitioner",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a Health Practitioner record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health practitioners"
                ],
                "summary": "Delete a HealthPractitioner record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "HealthPractitioner ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Health Practitioner deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "HealthPractitioner not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when deleting HealthPractitioner",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/health-practitioners": {
            "get": {
                "description": "Fetches all healthPractitioner records with pagination support.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health practitioners"
                ],
                "summary": "Retrieve a paginated list of health practitioners",
                "responses": {
                    "200": {
                        "description": "Health practitioners retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve health practitioners",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/health-practitioners/search": {
            "get": {
                "description": "Retrieves a paginated list of health practitioners based on search criteria.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Health practitioners"
                ],
                "summary": "Search for health practitioners with pagination",
                "responses": {
                    "200": {
                        "description": "Health practitioners retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve HealthPractitioners",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Authenticate a police officer using email or username and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login a police officer",
                "parameters": [
                    {
                        "description": "Login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "identifier": {
                                    "type": "string"
                                },
                                "password": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns access and refresh tokens",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid credentials",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Token generation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/police-officer": {
            "post": {
                "description": "Creates a new police Officer entry in the system and returns the created record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Police Officers"
                ],
                "summary": "Create a new police Officer record",
                "parameters": [
                    {
                        "description": "PoliceOfficer data to create",
                        "name": "PoliceOfficer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateOfficerPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created police Officer record",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when creating police Officer",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/police-officer/{id}": {
            "get": {
                "description": "Fetches a policeOfficer record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Police Officers"
                ],
                "summary": "Retrieve a single policeOfficer record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PoliceOfficer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PoliceOfficer retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "PoliceOfficer not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when retrieving PoliceOfficer",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the details of a policeOfficer record based on the provided ID and request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Police Officers"
                ],
                "summary": "Update an existing policeOfficer record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PoliceOfficer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "PoliceOfficer data to update",
                        "name": "policeOfficer",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdatePoliceOfficerPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PoliceOfficer updated successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Invalid input or empty request body",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "PoliceOfficer not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when updating policeOfficer",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a PoliceOfficer record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Police Officers"
                ],
                "summary": "Delete a PoliceOfficer record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PoliceOfficer ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PoliceOfficer deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "PoliceOfficer not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when deleting policeOfficer",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/police-officers": {
            "get": {
                "description": "Fetches all policeOfficer records with pagination support.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Police Officers"
                ],
                "summary": "Retrieve a paginated list of policeOfficers",
                "responses": {
                    "200": {
                        "description": "policeOfficers retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve policeOfficers",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/police-officers/search": {
            "get": {
                "description": "Retrieves a paginated list of policeOfficers based on search criteria.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Police Officers"
                ],
                "summary": "Search for policeOfficers with pagination",
                "responses": {
                    "200": {
                        "description": "PoliceOfficers retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve PoliceOfficers",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/police-post": {
            "post": {
                "description": "Creates a new police post entry in the system and returns the created record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Police Posts"
                ],
                "summary": "Create a new police post record",
                "parameters": [
                    {
                        "description": "PolicePost data to create",
                        "name": "Policepost",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreatePolicePostPayload"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created police post record",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when creating police post",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/police-post/{id}": {
            "get": {
                "description": "Fetches a policePost record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Police Posts"
                ],
                "summary": "Retrieve a single policePost record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PolicePost ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PolicePost retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "PolicePost not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when retrieving PolicePost",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the details of a policePost record based on the provided ID and request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Police Posts"
                ],
                "summary": "Update an existing policePost record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PolicePost ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "PolicePost data to update",
                        "name": "policePost",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdatePolicePostPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PolicePost updated successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Invalid input or empty request body",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "PolicePost not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when updating policePost",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a PolicePost record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Police Posts"
                ],
                "summary": "Delete a PolicePost record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PolicePost ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "PolicePost deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "PolicePost not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when deleting policePost",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/police-posts": {
            "get": {
                "description": "Fetches all policePost records with pagination support.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Police Posts"
                ],
                "summary": "Retrieve a paginated list of policePosts",
                "responses": {
                    "200": {
                        "description": "policePosts retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve policePosts",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/police-posts/search": {
            "get": {
                "description": "Retrieves a paginated list of policePosts based on search criteria.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Police Posts"
                ],
                "summary": "Search for policePosts with pagination",
                "responses": {
                    "200": {
                        "description": "PolicePosts retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve PolicePosts",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/refresh-token": {
            "post": {
                "description": "Generates new access and refresh tokens using a valid refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Refresh JWT tokens",
                "parameters": [
                    {
                        "description": "Refresh token",
                        "name": "refresh_token",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "properties": {
                                "refresh_token": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns new access and refresh tokens",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid input",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Invalid or expired refresh token",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Token generation error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/suspect": {
            "post": {
                "description": "Creates a new suspect entry with photo and fingerprints files.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Suspects"
                ],
                "summary": "Create a new suspect record with photo and fingerprints upload",
                "parameters": [
                    {
                        "type": "string",
                        "description": "First Name",
                        "name": "first_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Middle Name",
                        "name": "middle_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Last Name",
                        "name": "last_name",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "DOB in YYYY-MM-DD format",
                        "name": "dob",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Gender",
                        "name": "gender",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Phone Number",
                        "name": "phone_number",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "NIN",
                        "name": "nin",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Nationality",
                        "name": "nationality",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "address",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Occupation",
                        "name": "occupation",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Status",
                        "name": "status",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Created By",
                        "name": "created_by",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Updated By",
                        "name": "updated_by",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Photo file upload",
                        "name": "photo",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Fingerprints file upload",
                        "name": "fingerprints",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created suspect record",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or file error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when creating suspect",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/suspect/{id}": {
            "get": {
                "description": "Fetches a suspect record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Suspects"
                ],
                "summary": "Retrieve a single suspect record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Suspect ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Suspect retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Suspect not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when retrieving suspect",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "put": {
                "description": "Partially updates fields of an existing suspect, including photo and fingerprints.",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Suspects"
                ],
                "summary": "Update a suspect record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Suspect ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "First Name",
                        "name": "first_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Middle Name",
                        "name": "middle_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Last Name",
                        "name": "last_name",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "DOB in YYYY-MM-DD format",
                        "name": "dob",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Gender",
                        "name": "gender",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Phone Number",
                        "name": "phone_number",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "NIN",
                        "name": "nin",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Nationality",
                        "name": "nationality",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Address",
                        "name": "address",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Occupation",
                        "name": "occupation",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Status",
                        "name": "status",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "description": "Updated By",
                        "name": "updated_by",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "file",
                        "description": "Photo file upload",
                        "name": "photo",
                        "in": "formData"
                    },
                    {
                        "type": "file",
                        "description": "Fingerprints file upload",
                        "name": "fingerprints",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Suspect updated successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input or file error",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Suspect not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when updating suspect",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a suspect record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Suspects"
                ],
                "summary": "Delete a suspect record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Suspect ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Suspect deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Suspect not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when deleting suspect",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/suspects": {
            "get": {
                "description": "Fetches all suspect records with pagination support.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Suspects"
                ],
                "summary": "Retrieve a paginated list of suspects",
                "responses": {
                    "200": {
                        "description": "Suspects retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve suspects",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/suspects/search": {
            "get": {
                "description": "Retrieves a paginated list of suspects based on search criteria.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Suspects"
                ],
                "summary": "Search for suspects with pagination",
                "responses": {
                    "200": {
                        "description": "Suspects retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve suspects",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/victim/{id}": {
            "get": {
                "description": "Fetches a victim record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Victims"
                ],
                "summary": "Retrieve a single victim record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Victim ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Victim retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Victim not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when retrieving victim",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the details of a victim record based on the provided ID and request body.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Victims"
                ],
                "summary": "Update an existing victim record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Victim ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Victim data to update",
                        "name": "victim",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.UpdateVictimPayload"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Victim updated successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Invalid input or empty request body",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Victim not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when updating victim",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a victim record based on the provided ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Victims"
                ],
                "summary": "Delete a victim record by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Victim ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Victim deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "404": {
                        "description": "Victim not found",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when deleting victim",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/victims": {
            "get": {
                "description": "Fetches all victim records with pagination support.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Victims"
                ],
                "summary": "Retrieve a paginated list of victims",
                "responses": {
                    "200": {
                        "description": "Victims retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve victims",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            },
            "post": {
                "description": "Creates a new victim entry in the system and returns the created record.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Victims"
                ],
                "summary": "Create a new victim record",
                "parameters": [
                    {
                        "description": "Victim data to create",
                        "name": "victim",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Victim"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created victim record",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "400": {
                        "description": "Bad request due to invalid input",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Server error when creating victim",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        },
        "/victims/search": {
            "get": {
                "description": "Retrieves a paginated list of victims based on search criteria.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Victims"
                ],
                "summary": "Search for victims with pagination",
                "responses": {
                    "200": {
                        "description": "Victims retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    },
                    "500": {
                        "description": "Failed to retrieve victims",
                        "schema": {
                            "$ref": "#/definitions/fiber.Map"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.ChargePayload": {
            "type": "object",
            "properties": {
                "charge_title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                }
            }
        },
        "controllers.ChargeUpdatePayload": {
            "type": "object",
            "properties": {
                "charge_title": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "severity": {
                    "type": "string"
                }
            }
        },
        "controllers.CreateCasePayload": {
            "type": "object",
            "required": [
                "case_number",
                "title"
            ],
            "properties": {
                "case_number": {
                    "type": "string"
                },
                "charges": {
                    "description": "Optional inline",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.ChargePayload"
                    }
                },
                "date_opened": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "officer_id": {
                    "type": "integer"
                },
                "police_post_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "suspect_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "victim_ids": {
                    "description": "For existing victims",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "controllers.CreateHealthFacilityPayload": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "contact": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controllers.CreateOfficerPayload": {
            "type": "object",
            "required": [
                "badge_no",
                "email",
                "first_name",
                "last_name",
                "password",
                "phone",
                "post_id",
                "rank",
                "username"
            ],
            "properties": {
                "badge_no": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "minLength": 6
                },
                "phone": {
                    "type": "string"
                },
                "post_id": {
                    "type": "integer"
                },
                "rank": {
                    "type": "string"
                },
                "role_ids": {
                    "description": "Optional: to assign roles",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controllers.CreatePolicePostPayload": {
            "type": "object",
            "required": [
                "name"
            ],
            "properties": {
                "contact": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controllers.UpdateCasePayload": {
            "type": "object",
            "properties": {
                "charges": {
                    "description": "\u003c== new field",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.ChargeUpdatePayload"
                    }
                },
                "date_opened": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "officer_id": {
                    "type": "integer"
                },
                "police_post_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "suspect_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "victim_ids": {
                    "description": "NEW",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "controllers.UpdateChargePayload": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "dob": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "nin": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "controllers.UpdateExaminationPayload": {
            "type": "object",
            "properties": {
                "case_id": {
                    "type": "integer"
                },
                "consent_given": {
                    "type": "boolean"
                },
                "exam_date": {
                    "type": "string"
                },
                "facility_id": {
                    "type": "integer"
                },
                "findings": {
                    "type": "string"
                },
                "practitioner_id": {
                    "type": "integer"
                },
                "referral": {
                    "description": "Optional referral info",
                    "type": "string"
                },
                "treatment": {
                    "type": "string"
                },
                "victim_id": {
                    "type": "integer"
                }
            }
        },
        "controllers.UpdateHealthFacilityPayload": {
            "type": "object",
            "properties": {
                "contact": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controllers.UpdateHealthPractitionerPayload": {
            "type": "object",
            "properties": {
                "facility_id": {
                    "type": "integer"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profession": {
                    "description": "e.g., Doctor, Nurse, Counselor",
                    "type": "string"
                }
            }
        },
        "controllers.UpdatePoliceOfficerPayload": {
            "type": "object",
            "properties": {
                "badge_no": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "post_id": {
                    "type": "integer"
                },
                "rank": {
                    "type": "string"
                },
                "role_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "controllers.UpdatePolicePostPayload": {
            "type": "object",
            "properties": {
                "contact": {
                    "type": "string"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "controllers.UpdateVictimPayload": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "dob": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "last_name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "nin": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        },
        "fiber.Map": {
            "type": "object",
            "additionalProperties": true
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "models.Case": {
            "type": "object",
            "properties": {
                "case_number": {
                    "type": "string"
                },
                "charges": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Charge"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "date_opened": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "officer": {
                    "$ref": "#/definitions/models.PoliceOfficer"
                },
                "officer_id": {
                    "type": "integer"
                },
                "policePost": {
                    "$ref": "#/definitions/models.PolicePost"
                },
                "police_post_id": {
                    "type": "integer"
                },
                "status": {
                    "type": "string"
                },
                "suspect_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "victims": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Victim"
                    }
                }
            }
        },
        "models.Charge": {
            "type": "object",
            "properties": {
                "case_id": {
                    "type": "integer"
                },
                "charge_title": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "severity": {
                    "description": "e.g., Felony, Misdemeanor",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Examination": {
            "type": "object",
            "properties": {
                "case": {
                    "$ref": "#/definitions/models.Case"
                },
                "case_id": {
                    "type": "integer"
                },
                "consent_given": {
                    "type": "boolean"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "exam_date": {
                    "type": "string"
                },
                "facility": {
                    "$ref": "#/definitions/models.HealthFacility"
                },
                "facility_id": {
                    "type": "integer"
                },
                "findings": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "practitioner": {
                    "$ref": "#/definitions/models.HealthPractitioner"
                },
                "practitioner_id": {
                    "type": "integer"
                },
                "referral": {
                    "description": "Optional referral info",
                    "type": "string"
                },
                "treatment": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "victim": {
                    "$ref": "#/definitions/models.Victim"
                },
                "victim_id": {
                    "type": "integer"
                }
            }
        },
        "models.HealthFacility": {
            "type": "object",
            "properties": {
                "contact": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "practitioners": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.HealthPractitioner"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.HealthPractitioner": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "examinations": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Examination"
                    }
                },
                "facility_id": {
                    "description": "Foreign key to HealthFacility",
                    "type": "integer"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "profession": {
                    "description": "e.g., Doctor, Nurse, Counselor",
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.PoliceOfficer": {
            "type": "object",
            "properties": {
                "badge_no": {
                    "type": "string"
                },
                "cases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Case"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "email": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "post_id": {
                    "type": "integer"
                },
                "rank": {
                    "type": "string"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Role"
                    }
                },
                "updatedAt": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "models.PolicePost": {
            "type": "object",
            "properties": {
                "contact": {
                    "type": "string"
                },
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "location": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "officers": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.PoliceOfficer"
                    }
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Role": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Victim": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "cases": {
                    "description": "Relationships",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Case"
                    }
                },
                "createdAt": {
                    "type": "string"
                },
                "created_by": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "dob": {
                    "type": "string"
                },
                "first_name": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "last_name": {
                    "type": "string"
                },
                "nationality": {
                    "type": "string"
                },
                "nin": {
                    "type": "string"
                },
                "phone_number": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                },
                "updated_by": {
                    "type": "string"
                }
            }
        }
    }
}